<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc>
  <web>PhenomeCentral</web>
  <name>RemoteResults</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>PhenomeCentral.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1397573785000</creationDate>
  <date>1397573785000</date>
  <contentUpdateDate>1397573785000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity}}
$response.setContentType('application/json')##
{{html wiki="false" clean="false"}}
#set($result = {"resultsCount" : 0, "results" : []})
#if (!$request.patientId)
  #set($result.error = "patient is not specified")
  $jsontool.serialize($result)
  #break
#end
#if (!$request.server)
  #set($result.error = "server is not specified")
  $jsontool.serialize($result)
  #break
#end
#if ("$!{request.sendNewRequest}" == "true")
  ## REVIEW MAGIC NUMBER: don't send any top Exomiser genes in outgoing requests
  #set ($lastRequest = $services.remoteMatching.sendRequest("$!{request.patientId}", "$!{request.server}", 0))
#else
  #set ($lastRequest = $services.remoteMatching.getLastRequest("$!{request.patientId}", "$!{request.server}"))
#end
#if ($request.raw)
  $jsontool.serialize($lastRequest)
  #break
#end
#if (!$lastRequest)
  #set($result.error = "request was never initiated")
  #set($result.nodata = true)
  $jsontool.serialize($result)
  #break
#end
#set ($wasSent = $lastRequest.get("requestSent"))
#set ($matches = $lastRequest.optJSONArray("matches"))
#if (!$wasSent || !$matches)
  #if (!$wasSent)
    #set($result.errorCode = $lastRequest.get("errorCode"))
    #set($result.error = "unable to connect to remote server")
  #else
    #set($result.errorCode = $lastRequest.get("responseHTTPCode"))
    #if ($result.errorCode == 401)
        #set($result.error = "remote server rejected match request (not authorized to send requests)")
    #elseif ($result.errorCode == 400)
        #set($result.error = "remote server rejected match request (bad request)")
    #elseif ($result.errorCode == 406)
        #set($result.error = "remote server rejected match request (unsupported API version)")
    #else
        #set($result.error = "request was sent but the reply did not contain a valid list of matches")
    #end
  #end
  $jsontool.serialize($result)
  #break
#end
#set ($patient = $services.patients.getPatientById("$!{request.patientId}"))
{
  "replyHTTPCode": $lastRequest.get("responseHTTPCode"),
  "resultsCount" : $matches.length(),
  "results" : $matches,
  "query":  $patient.toJSON(),
  "request": $lastRequest.get("queryJSON"),
  "response": $lastRequest.get("responseJSON")
}
{{/velocity}}</content>
</xwikidoc>
